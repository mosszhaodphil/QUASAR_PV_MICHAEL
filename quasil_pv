#!/bin/sh

# QuASIL: QUASAR Bayesian Arterial SpIn Labeling parameter estimation
#
# Michael Chappell, IBME & FMRIB Image Analysis Group
#
# Copyright (c) 2011-2012 University of Oxford
#
# SHCOPYRIGHT

Usage() {
    echo "QUASAR Bayesian Inference for Arterial Spin Labelling MRI"
#    echo "Version: 0.95 (beta)"
    echo ""
    echo "Usage (optional parameters in {}):"
    echo " -i         : specify data file"
    echo " {-o}       : specify output directory"
    echo " {-m}       : specify brain mask file"
    echo ""
    echo " Extended options:"
    echo " --t1b      : Set the value for T1 of arterial blood {default: 1.6 s}"
    echo " --disp     : include bolus dispersion in the model (gamma kernel)"
    echo " --infertau : estimate bolus duration from data"
    echo " --mfree    : Do model-free (SVD deconvolution) analysis"
    echo ""
    echo " Sequence parameters:"
    echo " --slicedt  : Set the increase in TI with slice {default: 0.035 s}"
    echo " --fa       : Flip angle for LL readout {default: 35 degrees}"
    echo " --lfa      : Lower flip angle for final phase of data {default: 11.7 degrees}"
    echo " --tis      : comma separated list of TI values"
    echo "            {default: 0.04,0.34,0.64,0.94,1.24,1.54,1.84,2.14,2.44,2.74,3.04,3.34,3.64}"
    echo ""
}

Version() {
echo "$Id: quasil,v 1.11 2014/06/10 15:11:17 chappell Exp $"
exit 0
}

# deal with options

if [ -z $1 ]; then
    Usage
    exit 1
fi

until [ -z $1 ]; do
    case $1 in
	-o) outflag=1 outdir=$2
	    shift;;
	-i) inflag=1 infile=$2 #input/data file
	    shift;;
	-m) mask=$2
	    shift;;
	--t1b) t1b=$2
	    shift;;
	--t1) t1=$2
	    shift;;
	--t1wm) t1wm=$2
	    shift;;
	--fixt1) fixt1=1
	    ;;
	--slicedt) slicedt=$2
	    shift;;
	--fa) fa=$2
	    shift;;
       --lfa) lfa=$2
	    shift;;
	--disp) disp=1
	    ;;
	--mfree) mfree=1
	    ;;
	--tis) tis=$2
	    shift;;
	--iform) iform=$2 # to choose the input form of the data
	    shift;;
	--tau) tau=$2
	    shift;;
	--infertau) infertau=1
	    ;;
	--pvcorr) pvcorr=1
	    ;;
	--pvgm) pvgm=$2
	    shift;;
	--pvwm) pvwm=$2
	    shift;;
	--ccmds) calibcmds=$2
	    shift;;
	--debug) debug=1 #debugging option
	    ;;
	--version) Version
	    ;;
	*)  Usage
	    echo "Error! Unrecognised option on command line: $1"
	    echo ""
	    exit 1;;
    esac
    shift
done

#### --- Procedural ---
asl_file=asl_file
fabber=fabber
asl_mfree=asl_mfree ###~/cproject/asl_mfree/asl_mfree

#### --- Housekeeping ---
# set the output directory here if not specified
if [ -z $outflag ]; then
    echo "Ouput being placed in basil subdirectory of input directory"
    outdir=$indir/quasil;
fi

# Start by looking for the output directory (and create if need be)
count=0
while [ -d $outdir ]; do
    outdir=$outdir"+"
    count=`expr $count + 1`

    if [ $count -gt 20 ]; then
	echo "Error: $outdir too many existing output directories (i.e. shall not add another +)"
	exit
    fi
done
echo "Creating output directory: $outdir"
mkdir $outdir;

# save the starting directory
stdir=`pwd`

# make a temp directory to work in
tmpbase=`$FSLDIR/bin/tmpnam`
tempdir=${tmpbase}_quasil
mkdir $tempdir

# deal with the TIs
if [ -z $tis ]; then
# default QUASAR list of TIs
tis="0.04,0.34,0.64,0.94,1.24,1.54,1.84,2.14,2.44,2.74,3.04,3.34,3.64"
fi

count=0
tislist=""
thetis=`echo $tis | sed 's:,: :g'`
for ti in $thetis; do
    count=`expr ${count} + 1`
    tislist=`echo $tislist --ti${count}=$ti`
done
# echo "TIs list: $tislist" >> $log
ntis=$count;

if [ -z $iform ]; then
    iform="q"
fi

# parameters
#bolus duration - default 0.64 s
if [ -z $tau ]; then
tau=0.64;
fi

#T1b
if [ -z $t1b ]; then
t1b=1.6;
fi

#T1 - this si the prior value, since T1 will be estimated from the data
if [ -z $t1 ]; then
t1=1.3;
fi

#T1WM
if [ -z $t1wm ]; then
    t1wm=1.1;
fi

# sequence parameters
# slicedt
if [ -z $slicedt ]; then
    slicedt=0.035;
fi
# Flip angles
if [ -z $fa ]; then
    fa=35;
fi
if [ -z $lfa ]; then
    lfa=11.7;
fi

#### --- Pre-processing ---
echo "Pre-processing"
imcp $infile $tempdir/data
cd $tempdir
if [ $iform = "q" ]; then
# input is one big file 13x84 volumes containing raw data (TC pairs) grouped as phases(7) - repeats(6) - tis(13)
# (NB nesting order is from left to right - so that phases are together for one repeat at one TI in this case)
# need to get it into right form for fabber: tis(13) - phases(7), mean over repeats, both subtracted and raw data
    
    # first break out all the TIs
    $asl_file --data=data --ntis=$ntis --ibf=tis --iaf=tc --split=ti
    # now we have 13 tis each with 84 volumes
    
    # Within each TI: separate the phases 
    for ((i=0; i<$ntis; i++)); do
	mkdir ti$i
	tifile=`ls ti$i.nii.gz ti0$i.nii.gz ti00$i.nii.gz 2>/dev/null`
	echo $tifile
	$asl_file --data=$tifile --ntis=7 --ibf=rpt --iaf=tc --split=ti$i/phs
        # NB using asl_file to split the phases (pseudo TIs)
        # leaves TC pairs together
    done

    #now assemble the multiTI files
    phslist=""
    for ((j=0; j<7; j++)); do
	#within each phase
	filelist=""
	for ((i=0; i<$ntis; i++)); do
            #within each TI
	    filelist=$filelist" ti$i/phs00$j"
        done
	fslmerge -t aslraw_ph$j $filelist
        #take mean within TI
	$asl_file --data=aslraw_ph$j --ntis=$ntis --ibf=tis --iaf=tc --mean=aslraw_ph$j
	phslist=$phslist" aslraw_ph$j"
     done
    fslmerge -t aslraw $phslist
# data is now in 'f' form
elif [ $iform = "f" ]; then
# data is (already) in 'f' form: one file with 13x7 volumes raw data (TC pairs) grouped as tis(13) - phases(7)
    immv data aslraw
fi

# TC difference
$asl_file --data=aslraw --ntis=$ntis --ibf=tis --iaf=tc --diff --out=asldata
# discard the final (low flip angle) phase from the differenced data
# we do not (currently) use this for the main analysis
nkeep=`expr $ntis \* 6`
fslroi asldata asldata 0 $nkeep
# extract control images
$asl_file --data=aslraw --ntis=$ntis --ibf=tis --iaf=tc --spairs --out=aslraw
immv aslraw_even aslcontrol

if [ -z $mask ]; then
# auto generate mask
    fslmaths aslcontrol -Tmean aslmean
    bet aslmean mask -m
else
    cd "$stdir"
    imcp $mask $tempdir/mask
    cd $tempdir
fi

# copy mask to output for future reference
cd "$stdir" 
imcp $tempdir/mask $outdir/mask
cd $tempdir

#### --- Calibration ---
if [ -z "$calibcmds" ]; then
#voxelwise M0 calibration
    echo "#QUASAR analysis calibration options" > calib_options.txt
    echo "--mask=mask" >> calib_options.txt
    echo "--method=spatialvb --noise=white --param-spatial-priors=MN+" >> calib_options.txt
    echo "--model=satrecov" >> calib_options.txt
    echo "--repeats=1" >> calib_options.txt
    echo "--phases=6" >> calib_options.txt #NB 6 (normal) phases plus 1 LFA phase
    echo $tislist >> calib_options.txt
    echo "--t1=$t1 --FA=$fa --LFA=$lfa" >> calib_options.txt
    echo "--slicedt=$slicedt" >> calib_options.txt
    $fabber --data=aslcontrol --data-order=singlefile --output=calib -@ calib_options.txt
    # deal with outputs
    immv calib/mean_T1t calib/T1t
    immv calib/mean_g calib/g
    immv calib/mean_M0t calib/M0t

    #fslmaths instruction for calibration (for execution whilst back in starting dir)
    cinstr=" -div $tempdir/calib/M0t -mul 0.9 " # partition coefficient 0.9

    #save calibration results to output directory for reference
    imcp calib/M0t $stdir/$outdir/M0t
    imcp calib/T1t $stdir/$outdir/T1t

else
    # we have some commands to pass to asl_calib
    cd $stdir #NB run this in the original starting directory 
    asl_calib -c $tempdir/aslcontrol $calibcmds --mode satrecov -o $tempdir/calib --bmask $tempdir/mask --tis $tis --fa $fa --lfa $lfa --nphases

    #fslmaths instruction for calibration (for execution whilst back in starting dir)
    cinstr=" -div `cat $tempdir/calib/M0a.txt` " 

    #return to working in temporary directory
    cd $tempdir

    #save calibration results to output directory for reference
    cp calib/M0a.txt $stdir/$outdir/M0a.txt
    imcp calib/mean_T1t $stdir/$outdir/T1t
fi

## PVE images
if [ ! -z $pvcorr ]; then
    if [ -z $pvgm ]; then
	echo "Extracting PVE from QUASAR data"
	
        # up sample the T1 image
	${FSLDIR}/bin/flirt -in calib/T1t -out T1highres -applyisoxfm 1 -ref calib/T1t # now T1highres is the up sampled T1 map
	${FSLDIR}/bin/flirt -in calib/M0t -out PDhighres -applyisoxfm 1 -ref calib/M0t # now PDhighres is the up sampled M0 tisue map
	
        # Segmentation with FAST (no bias field as this T1 image is not affected by it)
	${FSLDIR}/bin/fast -N -p T1highres # -s 2 PDhighres T1highres
    # Output from this command:
    # 0: CSF probalility maps
    # 1: White matter probalility maps
    # 2: Grey matter probalility maps
    # T1highres_pveseg: segmentation results. Intensity: 1: CSF; 2: White matter; 3: Grey matter

	
        # downsample the PVE
	${FSLDIR}/bin/applywarp -i T1highres_pve_2 -r calib/T1t -o pvgm -s --interp=trilinear # trilinear interpolation is 3D interpolation
	${FSLDIR}/bin/applywarp -i T1highres_pve_1 -r calib/T1t -o pvwm -s --interp=trilinear # trilinear interpolation is 3D interpolation
        #${FSLDIR}/bin/applywarp -i T1highres_pve_2 -r calib/T1t -o pvcsf -s --interp=trilinear #not currently used but here for future use
	pvgm=pvgm # grey matter partial volume probability map
	pvwm=pvwm # white matter partial volume probability map
    fi
    
#if [ ! -z $pvgm ] & [ ! -z $pvwm ]; then
    # general tidying up of PVE images
    ${FSLDIR}/bin/fslmaths $pvgm -thr 0.1 -min 1 pvgm # threshold at 0.1 and take minumim at 1
    ${FSLDIR}/bin/fslmaths $pvwm -thr 0.1 -min 1 pvwm # threshold at 0.1 and take minumim at 1
    ${FSLDIR}/bin/fslmaths pvgm -bin gm_mask # use current image to binarise, now gm_mask is binary
    ${FSLDIR}/bin/fslmaths pvwm -bin wm_mask # use current image to binarise, now wm_mask is binary

    #save the PVE and masks for future reference
    ${FSLDIR}/bin/imcp pvgm $stdir/$outdir/pvgm
    ${FSLDIR}/bin/imcp pvwm $stdir/$outdir/pvwm
    ${FSLDIR}/bin/imcp gm_mask $stdir/$outdir/gm_mask
    ${FSLDIR}/bin/imcp wm_mask $stdir/$outdir/wm_mask

fi


if [ 1 -eq 0 ]; then

### --- Analysis ---
if [ -z $mfree ]; then
# --- [Model Based] ---
echo "Begin model-based analysis"

    echo "#QUASAR analysis options" > options.txt
    echo "--mask=mask" >> options.txt
    echo "--method=spatialvb" >> options.txt
    echo "--noise=white" >> options.txt
    echo "--model=quasar" >> options.txt
    echo "--inferart" >> options.txt
    echo "--repeats=1" >> options.txt
    echo $tislist >> options.txt
    echo "--t1=$t1 --t1b=$t1b --t1wm=$t1wm --tau=$tau --fa=$fa " >> options.txt
    echo "--slicedt=$slicedt" >> options.txt
    echo "--infert1 ">>options.txt
    echo "--artdir" >> options.txt
# use calibration information within inference
    
    echo "--usecalib ">>options.txt

    if [ -z $fixt1 ]; then
	t1sp=I
	if [ ! -z $infertau ]; then
	    echo "--image-prior6=calib_latest/T1t " >> options.txt
	else
	    echo "--image-prior5=calib_latest/T1t " >> options.txt
	fi
    else
	t1sp=N
    fi
    
    if [ -z $pvcorr ]; then
	if [ ! -z $infertau ]; then
	#infer bolus duration
	    echo "--infertau --tauboff" >> options.txt #Note we have only a single tau for both arterial and tissue signal (both also share the same dispersion properties)
	    echo "--image-prior13=calib_latest/g" >> options.txt
	    echo "--param-spatial-priors=MNNAN${t1sp}NNNNNNI" >> options.txt
	else
	# spatial prior list without bolus duration
	    echo "--image-prior12=calib_latest/g" >> options.txt
	    echo "--param-spatial-priors=MNAN${t1sp}NNNNNNI" >> options.txt
	fi
    else
        # PV correction
	echo "--inferwm " >> options.txt
	echo "--usepve " >> options.txt
	echo "--max-iterations=200" >> options.txt
	if [ ! -z $infertau ]; then
	#infer bolus duration
	    echo "--infertau --tauboff" >> options.txt #Note we have only a single tau for both arterial and tissue signal (both also share the same dispersion properties)
	    if [ -z $fixt1 ]; then
		echo "--image-prior11=calib_latest/T1t " >> options.txt # WM starts with the same measured T1 value as GM
	    fi
	    echo "--image-prior12=pvgm "
	    echo "--image-prior13=pvwm "
	    echo "--image-prior19=calib_latest/g" >> options.txt
	    echo "--param-spatial-priors=MNNAN${t1sp}NMNN${t1sp}IINNNNNI" >> options.txt
	else
	# spatial prior list without bolus duration
	     if [ -z $fixt1 ]; then
		 echo "--image-prior9=calib_latest/T1t " >> options.txt # WM starts with the same measured T1 value as GM
	     fi
	    echo "--image-prior10=pvgm " >> options.txt
	    echo "--image-prior11=pvwm " >> options.txt
	    echo "--image-prior17=calib_latest/g" >> options.txt
	    echo "--param-spatial-priors=MNAN${t1sp}NMN${t1sp}IINNNNNI" >> options.txt
	fi
    fi
    
    kern="none"
    if [ ! -z $disp ]; then
    # include dispersion in the model
	kern="gamma"
    fi

    $fabber --data=asldata --data-order=singlefile --disp=$kern --output=full -@ options.txt

   #copy results to output directory
    cd "$stdir"
    if [ -z $pvcorr ]; then
	fslmaths $tempdir/full/mean_ftiss $cinstr -mul 6000 $outdir/perfusion
    else
	fslmaths $tempdir/full/mean_ftiss $cinstr -mul 6000 -mas $tempdir/gm_mask $outdir/perfusion
    fi
    fslmaths $tempdir/full/mean_ftiss $outdir/perfusion_raw 
    imcp $tempdir/full/mean_delttiss $outdir/arrival
    fslmaths $tempdir/full/mean_fblood $cinstr $outdir/aCBV
    if [ ! -z $infertau ]; then
	imcp $tempdir/full/mean_tautiss $outdir/bolus_duration
    fi
    if [ ! -z $pvcorr ]; then
	fslmaths $tempdir/full/mean_fwm $cinstr -mul 6000 -mas $tempdir/wm_mask $outdir/perfusion_wm
	fslmaths $tempdir/full/mean_fwm $outdir/perfusion_wm_raw 
	imcp $tempdir/full/mean_deltwm $outdir/arrival_wm
    fi
else
# --- [Model Free] ---
echo "Begin model-free analysis"

# need to separate tissue and arterial signals
# first split up the differenced data into the separate phases (treating as TIs)
$asl_file --data=asldata --ntis=6 --ibf=tis --iaf=diff --split=asldata_ph
fslmaths asldata_ph002 -add asldata_ph005 -mul 0.5 asl_nocrush
fslmaths asldata_ph000 -add asldata_ph001 -add asldata_ph003 -add asldata_ph004 -mul 0.25 asl_tissue
fslmaths asl_nocrush -sub asl_tissue asl_blood

# fit GVF for the AIF
    echo "#QUASAR analysis AIF options" > aifoptions.txt
    echo "--data-order=singlefile" >> aifoptions.txt
    echo "--mask=mask" >> aifoptions.txt
    echo "--method=spatialvb" >> aifoptions.txt
    echo "--noise=white" >> aifoptions.txt
    echo "--model=quasar" >> aifoptions.txt
    echo $tislist >> aifoptions.txt
    echo "--t1=$t1 --t1b=$t1b --tau=$tau --fa=$fa " >> aifoptions.txt
    echo "--slicedt=$slicedt" >> aifoptions.txt
    echo "--repeats=1" >> aifoptions.txt
    echo "--infert1 ">> aifoptions.txt
    echo "--inferart --tissoff" >> aifoptions.txt
    echo "--onephase" >> aifoptions.txt
    echo "--artdir" >> aifoptions.txt
# use calibration information within inference
    echo " --usecalib ">> aifoptions.txt
    echo "--image-prior10=calib/g" >> aifoptions.txt
    echo "--param-spatial-priors=MNNNNNNNNI" >> aifoptions.txt
    echo "--save-model-fit" >> aifoptions.txt
    
    $fabber --data=asl_blood --disp=gvf --output=aif -@ aifoptions.txt

    # need aBV image (in absolute units) - to determine what voxels contain viable aif
    fslmaths aif_latest/mean_fblood $cinstr aBV
    
    # need aif shapes (scale aifs by the aBV)
    fslmaths aif_latest/modelfit -div aif_latest/mean_fblood aifs

    #smooth data (a little) before model-free analysis
    fslmaths asl_tissue -s 2.1 asl_tissue

    # do deconvolution

    $asl_mfree --data=asl_tissue --mask=mask --out=modfree --aif=aifs --dt=0.3 --metric=aBV --mthresh=0.012 --tcorrect --t1=1.6 --fa=$fa

    #copy results to output directory
    cd "$stdir"
    fslmaths $tempdir/modfree_magntiude $cinstr -mul 6000 -div $tau $outdir/perfusion 
    # note that in the calibration we have to account for the scaling of the AIF by the bolus duration
    # this is still required (even though we have tau in the model-fitting for the AIF) becuase we normalise the AIF above before deconvolution
    imcp $tempdir/aBV $outdir/aCBV
fi

fi # end of debugging if

# clearup
cd "$stdir" # make sure we are back where we started
if [ -z $debug ]; then
    echo "Tidying up"
    rm -r $tempdir
else
mv $tempdir .
fi

echo "QUASIL done"